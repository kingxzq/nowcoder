class Solution {
public:
    /**
     * 
     * @param matrix int整型vector> the matrix
     * @return int整型
     */
    int minPathSum(vector<vector<int> >& matrix) {
        int row = matrix.size(), col = matrix[0].size();
        vector<vector<int> > dp(row, vector(col)); // 定义动态规划数组dp，尺寸与输入数组一致
        dp[0][0] = matrix[0][0]; // 初始化左上角元素
        // 初始化第一行
        for (int i = 1; i < col; i ++) 
            dp[0][i] = dp[0][i - 1] + matrix[0][i]; 
        // 初始化第一列
        for (int i = 1; i < row; i ++) 
            dp[i][0] = dp[i - 1][0] + matrix[i][0]; 
        // 动态规划
        for (int i = 1; i < row; i ++) {
            for (int j = 1; j < col; j ++) {
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]; 
            }
        }
        return dp[row - 1][col - 1]; // 右下角元素结果即为答案
    }
};